import { Body, Controller, Get, Post, Query } from '@nestjs/common';
import { GetPlanetWeatherUseCase } from '../../application/use-cases/get-planet-weather.use-case';
import { PlanetWeatherDto } from '../../application/dto/planet-weather.dto';
import { CreatePlanetWeatherUseCase } from '../../application/use-cases/create-planet-weather.use-case';
import { PlanetWeatherCreateDto } from '../../application/dto/planet-weather-create.dto';
import { PlanetWeatherListDto } from '../../application/dto/planet-weather-list.dto';
import { GetAllPlanetWeatherUseCase } from '../../application/use-cases/get-all-planet-weather.use-case';
import { Public } from 'src/shared/middleware/public';

@Controller('planet-weather')
export class PlanetWeatherController {

    constructor(
        private readonly getPlanetWeatherData: GetPlanetWeatherUseCase,
        private readonly createPlanetWeatherData: CreatePlanetWeatherUseCase,
        private readonly getAllPlanetWeatherData: GetAllPlanetWeatherUseCase
    ) {}

    @Public()
    @Get('autogenerated')
    async getFusionados(
        @Query('latitude') lat?: number,
        @Query('longitude') lon?: number
    ): Promise<PlanetWeatherDto> {
        return await this.getPlanetWeatherData.execute(lat, lon);
    }

    @Post()
    async createPlanetWeather(
        @Body() planetWeather: PlanetWeatherCreateDto
    ): Promise<PlanetWeatherDto> {
        return await this.createPlanetWeatherData.execute(planetWeather);
    }

    @Get()
    async getAllPlanetWeather(
        @Query('autogenerated') autogenerated: boolean = true,
        @Query('limit') limit: number = 10,
        @Query('lastKey') lastKey?: string
    ): Promise<PlanetWeatherListDto> {
        return await this.getAllPlanetWeatherData.execute(autogenerated, limit, lastKey);
    }

}