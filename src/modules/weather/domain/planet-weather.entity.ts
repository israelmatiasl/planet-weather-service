import { v4 as uuidv4 } from 'uuid';

export class PlanetWeather {

  public id: string;
  public timestamp: number;
  public location: string;
  public temperature: number;
  public humidity: number;
  public planetName: string;
  public planetClimate: string;
  public matchScore: number;
  public autogenerated: number;

  constructor(data?: Partial<PlanetWeather>) {
    if (data) {
      this.id = data.id || uuidv4();
      this.timestamp = data.timestamp || Date.now();
      this.location = data.location || '';
      this.temperature = data.temperature || 0;
      this.humidity = data.humidity || 0;
      this.planetName = data.planetName || '';
      this.planetClimate = data.planetClimate || '';
      this.matchScore = data.matchScore || 0;
      this.autogenerated = data.autogenerated || 0;
    }
  }

  static create(props: any): PlanetWeather {
    return new PlanetWeather({
      id: uuidv4(),
      timestamp: Date.now(),
      location: props.location,
      temperature: props.temperature,
      humidity: props.humidity,
      planetName: props.planetName,
      planetClimate: props.planetClimate,
      matchScore: props.matchScore,
      autogenerated: props.autogenerated,
    });
  }

  static fromJson(json: Record<string, any>): PlanetWeather {
    return new PlanetWeather({
      id: json.id,
      timestamp: json.timestamp,
      location: json.location,
      temperature: json.temperature,
      humidity: json.humidity,
      planetName: json.planetName,
      planetClimate: json.planetClimate,
      matchScore: json.matchScore,
      autogenerated: json.autogenerated ? 1 : 0,
    });
  }

  toJson(): Record<string, any> {
    return {
      id: this.id,
      timestamp: this.timestamp,
      location: this.location,
      temperature: this.temperature,
      humidity: this.humidity,
      planetName: this.planetName,
      planetClimate: this.planetClimate,
      matchScore: this.matchScore,
      autogenerated: this.autogenerated,
    };
  }
}
